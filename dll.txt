 public static class ConsumptionMapper extends Mapper<Object, Text, Text, IntWritable> {

        private Text year = new Text();
        private IntWritable avgConsumption = new IntWritable();

        public void map(Object key, Text value, Context context) throws IOException, InterruptedException {
            String[] fields = value.toString().split("\\s+");  // Split by space or tab

            if (fields.length == 14) {  // Ensure it has 12 months + year + avg
                year.set(fields[0]);  // First field is the year
                avgConsumption.set(Integer.parseInt(fields[13]));  // Last field is the average consumption
                context.write(year, avgConsumption);
            }
        }
    }

    // Reducer Class
    public static class ConsumptionReducer extends Reducer<Text, IntWritable, Text, IntWritable> {

        public void reduce(Text key, Iterable<IntWritable> values, Context context)
                throws IOException, InterruptedException {
            for (IntWritable val : values) {
                if (val.get() > 30) {  // Only output years with average consumption > 30
                    context.write(key, val);
                }
            }
        }
    }

    // Main Method
    public static void main(String[] args) throws Exception {
        Configuration conf = new Configuration();
        Job job = Job.getInstance(conf, "electric consumption");
        job.setJarByClass(ElectricConsumption.class);
        job.setMapperClass(ConsumptionMapper.class);
        job.setReducerClass(ConsumptionReducer.class);
        job.setOutputKeyClass(Text.class);
        job.setOutputValueClass(IntWritable.class);
        FileInputFormat.addInputPath(job, new Path(args[0]));
        FileOutputFormat.setOutputPath(job, new Path(args[1]));
        System.exit(job.waitForCompletion(true) ? 0 : 1);
    }